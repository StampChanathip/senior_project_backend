import xlrd
from datetime import datetime, timedelta

# Function to convert floating-point time to AM/PM format
def convert_to_ampm(float_time):
    base_time = datetime(1899, 12, 30)
    time_delta = timedelta(days=float_time)
    target_time = base_time + time_delta
    return target_time.strftime("%I:%M:%S %p")

# Path to the Excel file
file_path = "D:\\Year 4\\project\\path item for visualization simp.xlsx"

# Open the workbook
workbook = xlrd.open_workbook(file_path)

# Select the second sheet
sheet = workbook.sheet_by_index(1)

# Find the column indices of "Relative arrival time", "chargings", "EMPTYTRIPLENGTH", and "PASSENGER_KILOMETERS"
relative_arrival_time_col = None
chargings_col = None
empty_trip_length_col_index = None
passenger_kilometers_col_index = None

for col_index in range(sheet.ncols):
    header = sheet.cell_value(0, col_index)
    if header == "Relative arrival time":
        relative_arrival_time_col = col_index
    elif header == "chargings":
        chargings_col = col_index
    elif header == "EMPTYTRIPLENGTH":
        empty_trip_length_col_index = col_index
    elif header == "PASSENGER_KILOMETERS":
        passenger_kilometers_col_index = col_index

if relative_arrival_time_col is None or chargings_col is None or empty_trip_length_col_index is None or passenger_kilometers_col_index is None:
    print("Required columns not found in the Excel file.")
    exit()

# Dictionary to store charging times for each vehicle
charging_times = {}
# Dictionary to store length data by vehicle number
length_by_number = {'Total empty trip length': {}, 'Total service length': {}}

# Iterate through rows to collect charging times and length data
for row_index in range(1, sheet.nrows):
    vehicle_number = int(sheet.cell_value(row_index, 1))  # Assuming vehicle number is in column B
    arrival_time = sheet.cell_value(row_index, relative_arrival_time_col)
    charging_status = sheet.cell_value(row_index, chargings_col)
    empty_trip_length_str = sheet.cell_value(row_index, empty_trip_length_col_index)
    passenger_kilometers_str = sheet.cell_value(row_index, passenger_kilometers_col_index)

    if vehicle_number not in charging_times:
        charging_times[vehicle_number] = []

    if charging_status.lower() == "charging":
        # Convert arrival_time to AM/PM format
        arrival_time_ampm = convert_to_ampm(arrival_time)
        charging_times[vehicle_number].append(arrival_time_ampm)

    # Convert empty trip length and passenger kilometers to floats
    empty_trip_length = float(empty_trip_length_str) if empty_trip_length_str else 0.0
    passenger_kilometers = float(passenger_kilometers_str) if passenger_kilometers_str else 0.0

    # Update length data for the vehicle number
    if vehicle_number not in length_by_number['Total empty trip length']:
        length_by_number['Total empty trip length'][vehicle_number] = 0.0
    length_by_number['Total empty trip length'][vehicle_number] += empty_trip_length

    if vehicle_number not in length_by_number['Total service length']:
        length_by_number['Total service length'][vehicle_number] = 0.0
    length_by_number['Total service length'][vehicle_number] += passenger_kilometers

# Print charging information, total empty trip length, and total service length for each vehicle
for vehicle, times in charging_times.items():
    print(f"Vehicle {vehicle}")
    if times:
        for i, time in enumerate(times, start=1):
            print(f"    > Charging lap : {i}")
            print(f"        > Charging time arrival : {time}")
    else:
        print("    > No charge baby (▀̿Ĺ̯▀̿ ̿) (▀̿Ĺ̯▀̿ ̿) (▀̿Ĺ̯▀̿ ̿)")

    # Print total empty trip length and total service length for the current vehicle
    if vehicle in length_by_number['Total empty trip length']:
        print(f"    Total Empty Trip Length: {length_by_number['Total empty trip length'][vehicle]}")

    if vehicle in length_by_number['Total service length']:
        print(f"    Total Service Length: {length_by_number['Total service length'][vehicle]}")

    print()  # Add a newline for better readability between vehicles
